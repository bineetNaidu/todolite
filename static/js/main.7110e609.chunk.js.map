{"version":3,"sources":["serviceWorker.js","components/Header.jsx","components/AddTodo.jsx","components/Todos.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","_ref","todos","console","log","handleCount","length","react_default","a","createElement","AddTodo","state","content","handleChange","e","target","value","_this","setState","handleSubmit","preventDefault","props","addTodo","className","classname","onSubmit","this","type","onChange","placeholder","autoFocus","Component","Todos","deleteTodo","toggleComplete","todoList","map","todo","key","id","onClick","checked","complete","name","for","App","Math","random","concat","Object","toConsumableArray","filter","components_Header","components_Todos","components_AddTodo","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7110e609.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nconst Header = ({ todos }) => {\r\n  console.log(todos);\r\n  const handleCount = todos.length ? <p>{todos.length} Things to do</p> : <p />;\r\n  return (\r\n    <div>\r\n      <h1>Todolite Apps</h1>\r\n      {handleCount}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    content: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    const content = e.target.value;\r\n    this.setState({ content });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-box\">\r\n        <form classname=\"add-todo\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.content}\r\n            placeholder=\"Add Todo..\"\r\n            autoFocus\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Todos = ({ todos, deleteTodo, toggleComplete }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        <div className=\"group-todo\" key={todo.id}>\r\n          <div className=\"list-todo\">\r\n            <input\r\n              className=\"input-checkbox\"\r\n              type=\"checkbox\"\r\n              onClick={() => {\r\n                toggleComplete(todo.id);\r\n              }}\r\n              checked={todo.complete}\r\n              name={todo.content}\r\n            />\r\n            <label\r\n              className={todo.complete === true ? \"completed\" : \"\"}\r\n              for={todo.content}\r\n            >\r\n              {todo.content}\r\n            </label>\r\n            <button\r\n              onClick={() => {\r\n                deleteTodo(todo.id);\r\n              }}\r\n              className=\"btn btn-danger btn-delete\"\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <li className=\"list-group-item\">Yeay, you have nothing left to do! </li>\r\n  );\r\n  return <div>{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport Todos from \"./components/Todos\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n      { id: 0, content: \"todos 1\", complete: false },\r\n      { id: 1, content: \"todos 2\", complete: false },\r\n      { id: 2, content: \"todos 3\", complete: true },\r\n      { id: 3, content: \"todos 4\", complete: false }\r\n    ]\r\n  };\r\n\r\n  addTodo = todo => {\r\n    todo.id = Math.random();\r\n    todo.complete = false;\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({ todos });\r\n  };\r\n\r\n  deleteTodo = id => {\r\n    const todos = this.state.todos.filter(todo => todo.id !== id);\r\n    this.setState({ todos });\r\n  };\r\n\r\n  toggleComplete = id => {\r\n    // console.log(this.state.todos[0].complete);\r\n    let todos = [...this.state.todos];\r\n    todos[id].complete = !todos[id].complete;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <Header todos={this.state.todos} />\r\n          <Todos\r\n            todos={this.state.todos}\r\n            deleteTodo={this.deleteTodo}\r\n            toggleComplete={this.toggleComplete}\r\n          />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}